// Code generated by MockGen. DO NOT EDIT.
// Source: log.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCtxLogger is a mock of CtxLogger interface.
type MockCtxLogger struct {
	ctrl     *gomock.Controller
	recorder *MockCtxLoggerMockRecorder
}

// MockCtxLoggerMockRecorder is the mock recorder for MockCtxLogger.
type MockCtxLoggerMockRecorder struct {
	mock *MockCtxLogger
}

// NewMockCtxLogger creates a new mock instance.
func NewMockCtxLogger(ctrl *gomock.Controller) *MockCtxLogger {
	mock := &MockCtxLogger{ctrl: ctrl}
	mock.recorder = &MockCtxLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCtxLogger) EXPECT() *MockCtxLoggerMockRecorder {
	return m.recorder
}

// CtxDebugF mocks base method.
func (m *MockCtxLogger) CtxDebugF(ctx context.Context, format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "CtxDebugF", varargs...)
}

// CtxDebugF indicates an expected call of CtxDebugF.
func (mr *MockCtxLoggerMockRecorder) CtxDebugF(ctx, format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CtxDebugF", reflect.TypeOf((*MockCtxLogger)(nil).CtxDebugF), varargs...)
}

// CtxErrorF mocks base method.
func (m *MockCtxLogger) CtxErrorF(ctx context.Context, format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "CtxErrorF", varargs...)
}

// CtxErrorF indicates an expected call of CtxErrorF.
func (mr *MockCtxLoggerMockRecorder) CtxErrorF(ctx, format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CtxErrorF", reflect.TypeOf((*MockCtxLogger)(nil).CtxErrorF), varargs...)
}

// CtxFatalF mocks base method.
func (m *MockCtxLogger) CtxFatalF(ctx context.Context, format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "CtxFatalF", varargs...)
}

// CtxFatalF indicates an expected call of CtxFatalF.
func (mr *MockCtxLoggerMockRecorder) CtxFatalF(ctx, format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CtxFatalF", reflect.TypeOf((*MockCtxLogger)(nil).CtxFatalF), varargs...)
}

// CtxInfoF mocks base method.
func (m *MockCtxLogger) CtxInfoF(ctx context.Context, format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "CtxInfoF", varargs...)
}

// CtxInfoF indicates an expected call of CtxInfoF.
func (mr *MockCtxLoggerMockRecorder) CtxInfoF(ctx, format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CtxInfoF", reflect.TypeOf((*MockCtxLogger)(nil).CtxInfoF), varargs...)
}

// CtxWarnF mocks base method.
func (m *MockCtxLogger) CtxWarnF(ctx context.Context, format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "CtxWarnF", varargs...)
}

// CtxWarnF indicates an expected call of CtxWarnF.
func (mr *MockCtxLoggerMockRecorder) CtxWarnF(ctx, format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CtxWarnF", reflect.TypeOf((*MockCtxLogger)(nil).CtxWarnF), varargs...)
}
