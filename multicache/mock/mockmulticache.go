// Code generated by MockGen. DO NOT EDIT.
// Source: multicache.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	multicache "github.com/javacode123/polycache/multicache"
)

// MockMultiCache is a mock of MultiCache interface.
type MockMultiCache struct {
	ctrl     *gomock.Controller
	recorder *MockMultiCacheMockRecorder
}

// MockMultiCacheMockRecorder is the mock recorder for MockMultiCache.
type MockMultiCacheMockRecorder struct {
	mock *MockMultiCache
}

// NewMockMultiCache creates a new mock instance.
func NewMockMultiCache(ctrl *gomock.Controller) *MockMultiCache {
	mock := &MockMultiCache{ctrl: ctrl}
	mock.recorder = &MockMultiCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiCache) EXPECT() *MockMultiCacheMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockMultiCache) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockMultiCacheMockRecorder) Del(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockMultiCache)(nil).Del), ctx, key)
}

// Get mocks base method.
func (m *MockMultiCache) Get(ctx context.Context, key string, duration time.Duration) (multicache.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, duration)
	ret0, _ := ret[0].(multicache.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMultiCacheMockRecorder) Get(ctx, key, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMultiCache)(nil).Get), ctx, key, duration)
}

// Set mocks base method.
func (m *MockMultiCache) Set(ctx context.Context, key string, value multicache.Value, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockMultiCacheMockRecorder) Set(ctx, key, value, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMultiCache)(nil).Set), ctx, key, value, duration)
}
