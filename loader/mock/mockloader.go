// Code generated by MockGen. DO NOT EDIT.
// Source: loader.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	loader "github.com/javacode123/polycache/loader"
)

// MockLoader is a mock of Loader interface.
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance.
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// GenKey mocks base method.
func (m *MockLoader) GenKey(ctx context.Context, notHitItem loader.Item) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenKey", ctx, notHitItem)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenKey indicates an expected call of GenKey.
func (mr *MockLoaderMockRecorder) GenKey(ctx, notHitItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenKey", reflect.TypeOf((*MockLoader)(nil).GenKey), ctx, notHitItem)
}

// Load mocks base method.
func (m *MockLoader) Load(ctx context.Context, notHitItem loader.Item) (loader.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, notHitItem)
	ret0, _ := ret[0].(loader.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockLoaderMockRecorder) Load(ctx, notHitItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockLoader)(nil).Load), ctx, notHitItem)
}
